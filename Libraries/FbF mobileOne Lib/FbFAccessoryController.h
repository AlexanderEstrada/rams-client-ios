//
//  FbFAccessoryController.h
//  FbF iOS SDK v1.5.0
//
//  Created by Philip A. Walton on 9/16/10.
//  Copyright 2012 Fulcrum Biometrics, LLC. All rights reserved.
//

#import <Foundation/Foundation.h>
#import <ExternalAccessory/ExternalAccessory.h>
#import "FbFmobileOneDelegate.h"
#import "FbFmobileOneErrors.h"

//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
/** @mainpage FbF mobileOne iOS Library
 
 The FbFAccessoryController class manages the interactions with the <em> FbF(tm) mobileOne </em> fingerprint accessory.  This class interfaces with the proprietary communication and messaging format from the mobileOne and provides a developer with access to the basic events and raw images generated by the mobileOne.  
 
 To use FbFAccessoryController to receive fingerprint images from the FbF mobileOne, perform the following steps:
 
 1. Add the ExternalAccessoryFramework to your project and ensure that you are building for an iOS target of 4.0 or higher.  NOTE: Starting with v.1.4.0 it is also necessary to include the libstdc++.6.dylib framework.
 
 2. Create a delegate for the FbFmobileOneDelegate protocol include the required messages for \e didChangeConnectionStatus and \e didReceiveData.  Add optional messages as required for your delegate.
 
 3. Initialize an instance of the FbFAccessoryController using the static method \e sharedControllerwithDelegate.  The instance should be created once during application initialization and persisted.
 
 4. From the instance of the FbFAccessoryController, call the \e startScanner method to put the scanner into capture mode.  The delegate will recieve a \e didReceiveScannerStartStop message when the scanner has successfully started.
 
 5. When a \e didReceiveData message is received, open the NSData parameter as a UIImage (e.g. [UIImage imageWithData:data]).
 
 6. Remember to stop the scanner using \e stopScanner before your application goes to the background and then restart the scanner when the application becomes active - this will conserve batteries on the mobileOne.
 
 To use this class, you must provide a delegate that conforms to the FbFmobileOneDelegate protocol. See FbFmobileOneDelegate Protocol Reference.
 
 */

@interface FbFAccessoryController : NSObject <EAAccessoryDelegate, NSStreamDelegate> {
	
    id <FbFmobileOneDelegate> _delegate;
    
	BOOL	ScannerStarted;
    NSString *FbFbioServer;
}

//////////////////////////////////////////////////////////////////////////////////////////
/// @name Initializing The mobileOne
//////////////////////////////////////////////////////////////////////////////////////////

/** The scanner's delegate object. 
 
 The delegate receives callbacks when the user places a recognizable finger on the fingerprint sensor. You must provide a delegate object to use the scanner. If this property is nil, the scanner will function but now data will be returned.
 
 For more information about the methods you can implement for your delegate object, FbFmobileOneDelegate.
 
 
 */

@property (nonatomic, assign) id <FbFmobileOneDelegate> delegate;
@property (nonatomic, retain) NSString *FbFbioServer;

/**
 Initialization without delegate.  Delegate may be set seperately.
 */
+ (FbFAccessoryController *)sharedController;
/**
 Initialization with delegate.
 */
+ (FbFAccessoryController *)sharedControllerwithDelegate:(id<FbFmobileOneDelegate>)delegate;

//////////////////////////////////////////////////////////////////////////////////////////
/// @name Determining the Image Dimensions
//////////////////////////////////////////////////////////////////////////////////////////

/** The mobileOne supports two image modes.  Version 1b (default) provides a 256x360 pixel image at 508dpi.  Version 1a provides a 192x270 pixel image at 381dpi.  Only the Version 1b image is PIV/FIPS-201 compliant.  Version 1a is deprecated with current hardware (manufactured after 4/30/2011) but is left in to allow backwards compatability with early versions of the mobileOne.  After the mobileOne is connected, you may check the status of the Version1b property to determine if you will receive the 381dpi or the 508dpi image.  The image data returned from the mobileOne will vary in pixel dimensions based upon the supported mode of the attached mobileOne.  Please verify Version1b status or pixel dimensions before making image dimensions assumptions.  
 
 */
@property (readonly, nonatomic) BOOL Version1b;


//////////////////////////////////////////////////////////////////////////////////////////
/// @name mobileOne Operational Information
//////////////////////////////////////////////////////////////////////////////////////////



/** This instnce method returns a BOOL indicating whether or not the mobileOne is connected.￼
 
 */
- (BOOL)mobileOneConnected;
/**
 This property returns a float value indicating the current voltage of the batteries within the mobileOne.  Normal range is between 4.1V and 3.3V.
 */
@property (readonly, nonatomic) NSNumber *VoltIndex;
/**
 This BOOL indicates whether the mobileOne is actively scanning.
 */
@property (readonly, nonatomic) BOOL ScannerStarted;

//////////////////////////////////////////////////////////////////////////////////////////
/// @name mobileOne Control Methods
//////////////////////////////////////////////////////////////////////////////////////////

/** Starts scanning for a fingerprint image.￼
 
 The mobileOne works by allowing a user's fingerprint touch to initiate a data transfer event.  The mobileOne uses a sleep-then-grab capture action that incorporates a fingerprint quality check.  When the mobileOne is actively scanning, the LED will blink at a rate of 1/second.  A user must place their finger firmly on the fingerprint sensor in order for the image to be captured.  Once the image capture is complete and the data begin transmission, the didReceiveDataSpin message will be called.
 
 */
- (void)startScanner;
/**
 Stops scanning for a fingerprint image.  The LED will blink at rate of every 10 seconds while stopped.
 */
- (void)stopScanner;
/**
 Sends a request to update the VoltIndex value.  This method may take up to 2 seconds to complete.
 */
- (void)checkBattery;
/**
 Checks the status of the FbF bioServer by returning the number of connected server threads
 */
- (int) serverCount;
/**
 Enrolls an image on the FbF bioServer
 */
- (BOOL) enrollImage:(NSData *)imageData withPersonid:(NSString *)person bioLocation:(NSNumber *)location;
/**
 Identifies an image on the FbF bioServer
 */
- (NSString *) identifyImage:(NSData *)imageData bioLocation:(NSNumber *)location;
/**
 Delete biometric identifiers on the FbF bioServer
 */
- (BOOL) deleteBiometric:(NSString *)person bioLocation:(NSNumber *)location;

@end


